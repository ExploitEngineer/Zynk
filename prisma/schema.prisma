generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id               String    @id @map("_id")
  name             String
  email            String
  emailVerified    Boolean   @default(false)
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt
  stripeCustomerId String?
  plan             String    @default("Free")
  sessions         Session[]
  accounts         Account[]
  chats            Chat[]
  usages           Usage[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Subscription {
  id                   String    @id @map("_id")
  plan                 String
  referenceId          String
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String?
  periodStart          DateTime?
  periodEnd            DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  cancelAtPeriodEnd    Boolean?  @default(false)
  seats                Int?

  @@map("subscription")
}

model Chat {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  lastResponseId String?
  messages       Message[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
  userId         String

  @@map("chat")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      String
  text      String
  chatId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id])
  like      Boolean? @default(false)
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("message")
}

model Usage {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String
  model            String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id])

  @@map("usage")
}
